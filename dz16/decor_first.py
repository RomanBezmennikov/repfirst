# Пишем первый декоратор
# Создаем функцию которая результатом своей работы будет возвращать изначально переданную функцию обернутую в другую
# функцию
def decorator_first(func):
    # Внутри присутствует функция оберка которая и будет возвращаться из декоратора
    def wrapper():
        print("Выполняем код перед выполнением оригинальной функции")
        # Внутри фнкции осуществляется работа с оригинальной функцией
        func()
        print("Выполняем код после выполнения оригинальной функции")
    return wrapper


def func_1():
    print("Выполняем функцию func_1")


def funky():
    print("Выполняем функцию funky")

# Для того чтобы обернуть созданные функции
# прописываем переменную в которую поместим ссылку на обрнутую функцию
# Вызвав сам декоратор и передав в него ссылку на функцию которую хотим обернуть
decor_func_1 = decorator_first(func_1)
# Обычно принято помещать обернутую функцию точно по тому же имени что и изначальную функцию
funky = decorator_first(funky)
func_1 = decorator_first(func_1)
func_1()
funky()


# Так же задекорировать функцию можно следующим образом
@decorator_first
# Над объявлением функции указывается символ собачки и без пробела и скобок записывается название фекоратора
def fun():
    print("Выполняем функцию fun")

fun()
