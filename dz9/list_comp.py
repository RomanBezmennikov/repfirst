# Генераторы списков
#
li = [1, 2, 3, 4, 5]
li1 = list(range(1, 11))
print(li1)

# Наполнение при помощи цикла
li_2 = []
for i in range(1, 11):
    li_2.append(i**2)

print(li_2)

# Наполнение списка в момент создания при помощи генератора списка
li_3 = [i**2 for i in range(1, 11)]
# Гератор списка состоит [(элемент который будет заполнять список) (for i in итерируемый объект) (условный оператор)]
print(li_3)
# В данном случае нам не важно какое то определенное значение из перебираемого диапазона, важнее чтобы цикл отработал
# Определенное количество раз и как следствие мы получили установку одного и того же значения столько раз сколько
# итераций прошел цикл
li_4 = [1 for _ in range(50)]
# for _ in  - здесь в качестве переменной берем "_" просто потому что она не используется, зачастую не используемую
# переменную принято именовать так
print(li_4)
# Возьмем ранее сгенерированный список и добавим к каждому его элементу по единице
li_5 = [i+1 for i in li_3]
print(li_5)
# Добавляем оператор if после самого объявления цикла через пробел, если условие идущее после оператора будет верным
# То выполняется добавление элемента
li_6 = [i for i in li_5 if i % 2 == 0]
print(li_6)
# Так же все выражение может переноситься на новые строки в рамках крадратных скобок
li_7 = [i for i in li_5
        if i % 2 == 0
        ]
print(li_7)
# Тоже смое только циклом
li_6_1 = []
for i in li_5:
    if i % 2 == 0:
        li_6_1.append(i)
print(li_6_1)

# Еще немного про условия
li_nums = [i for i in range(-50, 51)]
print(li_nums)
# Условия могут содержать не только один оператор сравнения
li_8 = [i*2 for i in li_nums if -3 <= i <= 13]
print(li_8)
# Можем при помощи операторов логического сложения и умножения расширять условия отбора или уточнять их
# Если условие записанное после if возвращает False то добавление элемента не осуществляется
li_9 = [i for i in li_nums if -3 <= i <= 13 and i % 2 != 0]
print(li_9)
# Формируем последователность чисел
# i перебирается в диапазоне от 0-2 а j как бы вложенна и перебирается от 0-4
li_10 = [f'{i}-{k}'
         for i in range(3)
         for k in range(4)]
print(li_10)

#Аналог выражения выше только циклом с вложенным циклом
li_10_1 = []
for i in range(3):
    for k in range(4):
        li_10_1.append(f'{i}-{k}')

print(li_10_1)

