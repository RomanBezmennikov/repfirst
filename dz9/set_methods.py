# Методы множеств
# Некоторые методы являются прямой альтернативой операциям рассмотренным в set_operations.py

set_1 = {1, 5, -1, -10}
set_2 = {2, -1, 7, 5, 8}
set_3 = {1, 5, -1, -10}
set_4 = {1, 5, -40}

# Методы аналоги из set_operations.py
# Сложение множеств
print(set_1.union(set_2))
# Пересечение множеств
print(set_1.intersection(set_2))
# разность
print(set_1.difference(set_2))
print(set_2.difference(set_1))
# Симметричная разносность
print(set_1.symmetric_difference(set_2))
print(set_1)
# Методы которые делают тоже самое что и метод выше, но только меняя оригинальное множество(то от которго вызывается
# метод)
# Сложение
print('-'*10)
set_1.update(set_2)
print(set_1)
# Пересечение
set_1.intersection_update(set_2)
# Разность
set_1.difference_update(set_2)
# Симметричная разность
set_3.symmetric_difference_update(set_4)
print(set_3)

# Доп методы

# Добавление элемента в множество add(значение)
set_3.add(45)
print(set_3)
# Удаление элемента из множества remove(значение) Keyerror если значения нет
set_3.remove(-40)
print(set_3)
# Удаление элемента из множества discard(значение) если значения нет ничего не выбрасывает
set_3.discard(11)
print(set_3)

# Извлекает из множества значение(возвращает результатом работы извлеченное значение) при этом удаляет его из множества
# Удаляет случайный элемент
print(set_3.pop())
print(set_3.pop())
print(set_3.pop())

# forozenset - неизменяемая неупорядоченная коллекция уникальных элементов
# Объявляется таким способом функцией frozenset(итерируемое значение)
fr_set = frozenset((1, 2, 4, 6))
print(fr_set)
print(type(fr_set))
# Обновить множество не сможем но сможем его переписать
