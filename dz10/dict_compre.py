# Генераторы ммножеств и словарей

# Генераторы множеств
# Прописывается генератор множеств точно также как и генератор словарей, но с одним различием
# Скобки указываются фигурные
set_1 = {i for i in range(1, 6)}
print(set_1)


# Генератор словаря
# Аналог работы функции fromkeys
di = {i: None for i in range(1, 5)}
# переменная которая используется внутри генератора, недоступна вне гератора, то есть вызвать ее вне генерируемого
# списка(множества, словаря) не получится
# print(i) - такое выражение не сработает
print(di)

# Генерируем словарь значениями в котором будут еще словари

di_1 = {str(i): {j: None for j in range(3)} for i in range(10, 20)}
print(di_1)
# Создаем писок из заголовков которые будем помещать в качестве ключей для вложенных словарей
li = ["id", 'title', "text"]
# Генерируем словарь в качестве ключей у которого будут числа от 1 и до 5 включительно
# Значениями словаря будут вложенные словари, ключами в котором будут значения из ранее определенного списка
# В качестве значений определим значение None (пусто)
di_2 = {i: {title: None for title in li} for i in range(1, 6)}
print(di_2)

dict_1 = {'red': 1, "yellow": "text", "green": 34, "blue": 255, "brown": "123"}
# ('red', 1)
print(type("sd") == str)
# Для того чтобы вытащить пары ключ-значение из словаря используем items() сравниваем значение
# На соответствие типу данных int если соответствует, то добавляем значение в словарь
dict_int = {key: value for key, value in dict_1.items() if isinstance(value, int)}
print(dict_int)

stud = "Rob Dave Chris Sara Maria Kate".split()
# Преобразуем список в словарь
# Берем индекс и элемент списка и помещаем их в качестве ключа и значения
dict_stud = {value: index for index, value in enumerate(stud)}
print(dict_stud)
dict_stud_rev = {key: value for value, key in dict_stud.items()}
print(dict_stud_rev)
# Получаем из нашего словря список из имен(список значений)
print([dict_stud_rev[i] for i in dict_stud_rev])

# Функция enumerate
# Необходима для получения от списка(кортежа)
print(list(enumerate(stud)))
for i in enumerate(stud):
    print(i)

# Это не генератор кортежей, сгенерировать кортеж нельзя
# Данное выражение в круглых скобках это гераторное выражение
print((i for i in range(5)))
