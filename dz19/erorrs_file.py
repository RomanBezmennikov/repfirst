# Обработка ошибок связанных с файлами
# В случае когда файл не существует или имя указанно не правильно, не будет падать все приложение а будет осуществлен
# вывод об этом в консоль
try:
    f = open('ft_file.txt')
    print(f)
except FileNotFoundError:
    print("Чтение файла не удалось, были использованны стандартные конфигурации")

# При открытии файла его всегда нобходимо закрывать после того как были выполненны все необходимые операции
f = open('fst_file.txt')
print("Файл закрыт?")
# Данное свойство показывает закрыт ли файл, если файл закрыт - True  если нет False
print(f.closed)

# Закрытие файла, данный метод используется для того чтобы освободить ресурсы затрачиваемые на чтение файла
# И предотвратить утечку памяти
f.close()
print(f.closed)

# Общие исключения на ошибки во время открытия и чтения файла
try:
    f = open('fst_file.txt')
    print(f)
    g = f + "hello"
    f.close()
except FileNotFoundError:
    print("Чтение файла не удалось, так как файл не был найден, были использованны стандартные конфигурации")
except Exception:
    print("Ошибка во время чтения файла")

# Для осуществление закрытия файла в любой непредвиденной ситуации используется конструкция try: finally
# И в частности конструкция подобная указанной ниже (стандартная схема открытия и закрытия файла в блоке try)
try:
    f = open('fst_file.txt')
    try:
        print(f)
        g = f + "hello"
        print("Завершено")
    finally:
        f.close()
except FileNotFoundError:
    print("Чтение файла не удалось, так как файл не был найден, были использованны стандартные конфигурации")
except Exception:
    print("Ошибка во время чтения файла")

print(f"Файл закрыт? -{f.closed}")



# Использование контекстного менеджера для закрытия файла даже в аварийном режиме
# Для использования менеджера контекста используется ключевое слово with после него записывается функция открытия файла
# Далее записывается ключевое слово 'as' и после него указывается название переменной в которую будет помещено
# возвращаемое значение из функции open
with open('fst_file.txt') as file:
    print(file.read())
    print(file.closed)
print(file.closed)

# Аналог стандартного блока работы с файлом с использованием менеджера контекста
try:
    with open('fst_file.txt') as f:
        print(f)
        g = f + "hello"
        print("Завершено")
except FileNotFoundError:
    print("Чтение файла не удалось, так как файл не был найден, были использованны стандартные конфигурации")
except Exception:
    print("Ошибка во время чтения файла")
    print(f.closed)



